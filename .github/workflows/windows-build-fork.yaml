name: Windows Build - Optimized CUDA Installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # Step 1: Validate version compatibility
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      cuda_full_version: ${{ steps.check.outputs.cuda_full_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
      torchvision_version: ${{ steps.check.outputs.torchvision_version }}
      torchaudio_version: ${{ steps.check.outputs.torchaudio_version }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix
          COMPATIBLE=false
          CUDA_FULL_VERSION=""
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.1.1"
                  ;;
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
              esac
              TORCHVISION_VERSION="0.20"
              TORCHAUDIO_VERSION="2.5"
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
                "12.6") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.6.2"
                  ;;
              esac
              TORCHVISION_VERSION="0.21"
              TORCHAUDIO_VERSION="2.6"
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.8.0"
                  ;;
              esac
              TORCHVISION_VERSION="0.22"
              TORCHAUDIO_VERSION="2.7"
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination"
            exit 1
          fi
          
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          echo "cuda_full_version=$CUDA_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "torchvision_version=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
          echo "torchaudio_version=$TORCHAUDIO_VERSION" >> $GITHUB_OUTPUT
          
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  # Step 2: Main build job with optimized resources
  build-windows-wheel:
    # Use larger runner for more memory
    runs-on: windows-2022
    # Alternative: Use self-hosted runner with more resources
    # runs-on: [self-hosted, windows, x64, gpu]
    
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    
    # Increase timeout for complex builds
    timeout-minutes: 180
    
    steps:
      - name: Check system resources
        shell: powershell
        run: |
          Write-Host "System Information:"
          Write-Host "==================="
          
          # Get memory info
          $totalMemory = (Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory / 1GB
          $freeMemory = (Get-WmiObject -Class Win32_OperatingSystem).FreePhysicalMemory / 1MB
          Write-Host "Total Memory: $([math]::Round($totalMemory, 2)) GB"
          Write-Host "Free Memory: $([math]::Round($freeMemory, 2)) MB"
          
          # Get CPU info
          $cpu = Get-WmiObject -Class Win32_Processor
          Write-Host "CPU: $($cpu.Name)"
          Write-Host "CPU Cores: $($cpu.NumberOfCores)"
          Write-Host "Logical Processors: $($cpu.NumberOfLogicalProcessors)"
          
          # Get disk space
          $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
          $freeSpace = $disk.FreeSpace / 1GB
          Write-Host "Free Disk Space: $([math]::Round($freeSpace, 2)) GB"

      - name: Configure Windows page file
        shell: powershell
        run: |
          Write-Host "Configuring page file for additional virtual memory..."
          # This requires admin privileges in self-hosted runners
          # For GitHub-hosted runners, this step will be skipped
          try {
              wmic computersystem set AutomaticManagedPagefile=False
              wmic pagefileset delete
              wmic pagefileset create name="C:\pagefile.sys"
              wmic pagefileset set name="C:\pagefile.sys" InitialSize=16384 MaximumSize=32768
              Write-Host "Page file configured successfully"
          } catch {
              Write-Host "Could not configure page file (requires admin privileges)"
          }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Initialize and verify submodules
      - name: Initialize and update submodules
        shell: powershell
        run: |
          Write-Host "Initializing git submodules..."
          git submodule update --init --recursive --force
          
          Write-Host "`nSubmodule status:"
          git submodule status
          
          Write-Host "`nVerifying submodule directories:"
          $submodulePaths = git config --file .gitmodules --get-regexp path | ForEach-Object { $_.Split(' ')[1] }
          foreach ($path in $submodulePaths) {
              if (Test-Path $path) {
                  Write-Host "[OK] Found submodule: $path"
              } else {
                  Write-Warning "[WARNING] Missing submodule: $path"
              }
          }

      # Download missing third-party dependencies if not submodules
      - name: Setup third-party dependencies
        shell: powershell
        run: |
          Write-Host "Checking and setting up third-party dependencies..."
          
          # Create third_party directory if needed
          if (-not (Test-Path "third_party")) {
              New-Item -ItemType Directory -Path "third_party"
          }
          
          # Download spdlog if missing
          if (-not (Test-Path "third_party/spdlog/include/spdlog/spdlog.h")) {
              Write-Host "Downloading spdlog..."
              if (Test-Path "third_party/spdlog") {
                  Remove-Item -Path "third_party/spdlog" -Recurse -Force
              }
              git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git third_party/spdlog
          }
          
          # Download other dependencies if needed
          $dependencies = @{
              "json" = "https://github.com/nlohmann/json.git"
              "mio" = "https://github.com/mandreyel/mio.git"
          }
          
          foreach ($dep in $dependencies.Keys) {
              if (-not (Test-Path "third_party/$dep")) {
                  Write-Host "Downloading $dep..."
                  git clone --depth 1 $dependencies[$dep] "third_party/$dep"
              }
          }
          
          # Verify critical files exist
          Write-Host "`nVerifying critical files:"
          $criticalFiles = @(
              "third_party/spdlog/include/spdlog/spdlog.h",
              "third_party/json/include/nlohmann/json.hpp",
              "third_party/cutlass/include/cutlass/cutlass.h"
          )
          
          foreach ($file in $criticalFiles) {
              if (Test-Path $file) {
                  Write-Host "[OK] Found: $file"
              } else {
                  Write-Warning "[WARNING] Missing: $file"
              }
          }

      # Verify source structure
      - name: Verify project structure
        shell: powershell
        run: |
          Write-Host "Verifying project structure..."
          
          # Check for src/interop directory and files
          if (Test-Path "src/interop") {
              Write-Host "[OK] Found src/interop directory"
              $interopFiles = Get-ChildItem "src/interop" -Filter "*.h" -ErrorAction SilentlyContinue
              if ($interopFiles) {
                  Write-Host "Header files in src/interop:"
                  $interopFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
              } else {
                  Write-Error "[ERROR] No header files found in src/interop"
                  
                  # Try to find torch.h elsewhere
                  Write-Host "`nSearching for torch.h in the project:"
                  Get-ChildItem -Path . -Filter "torch.h" -Recurse -ErrorAction SilentlyContinue | 
                      Select-Object -First 5 | ForEach-Object { Write-Host "  Found at: $($_.FullName)" }
              }
          } else {
              Write-Error "[ERROR] src/interop directory not found!"
              
              # List what's actually in src
              if (Test-Path "src") {
                  Write-Host "`nContents of src directory:"
                  Get-ChildItem "src" -Name | ForEach-Object { Write-Host "  - $_" }
              }
          }
          
          # Check all expected directories
          $expectedDirs = @(
              "src",
              "src/interop",
              "src/kernels",
              "nunchaku",
              "nunchaku/csrc",
              "third_party/cutlass",
              "third_party/json",
              "third_party/mio",
              "third_party/spdlog",
              "third_party/Block-Sparse-Attention"
          )
          
          $missingDirs = @()
          foreach ($dir in $expectedDirs) {
              if (Test-Path $dir) {
                  Write-Host "[OK] Found: $dir"
              } else {
                  Write-Warning "[MISSING] $dir"
                  $missingDirs += $dir
              }
          }
          
          if ($missingDirs.Count -gt 0) {
              Write-Host "`nProject structure check failed. Missing directories:"
              $missingDirs | ForEach-Object { Write-Host "  - $_" }
              
              Write-Host "`nFull directory tree (first 3 levels):"
              Get-ChildItem -Recurse -Depth 2 -Directory | Select-Object -First 50 | 
                  ForEach-Object { Write-Host $_.FullName.Replace($PWD, ".") }
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Install CUDA using cuda-toolkit action
        uses: Jimver/cuda-toolkit@v0.2.23
        id: cuda-toolkit
        with:
          cuda: ${{ needs.validate-compatibility.outputs.cuda_full_version }}
          method: 'local'
          use-github-cache: true
          use-local-cache: true

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build packaging

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $torchvisionVersion = "${{ needs.validate-compatibility.outputs.torchvision_version }}"
          $torchaudioVersion = "${{ needs.validate-compatibility.outputs.torchaudio_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          pip install --no-cache-dir "torch==$torchVersion" "torchvision==$torchvisionVersion" "torchaudio==$torchaudioVersion" --index-url $indexUrl

      - name: Set optimized build environment variables
        shell: cmd
        run: |
          REM Core build settings
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          
          REM CRITICAL: Reduce parallel jobs to prevent memory exhaustion
          set MAX_JOBS=1
          set TORCH_CUDA_ARCH_LIST=8.0
          
          REM Compiler optimizations for memory efficiency
          set CL=/MP1 /O1 /GS- /Gy /Gw
          
          REM NVCC memory optimizations
          set NVCC_APPEND_FLAGS=--threads 1 --optimize 1 --use_fast_math --ptxas-options=-v
          set NVCC_APPEND_FLAGS=%NVCC_APPEND_FLAGS% --maxrregcount=128
          set NVCC_APPEND_FLAGS=%NVCC_APPEND_FLAGS% -Xcompiler "/wd4819 /wd4251 /wd4244 /wd4267 /wd4275 /wd4018 /wd4190 /wd4624 /wd4067 /wd4068"
          
          REM Additional memory-saving flags
          set CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread
          set CUTLASS_NVCC_ARCHS=80
          
          REM CUDA paths
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          
          REM Update paths to include all necessary directories
          set INCLUDE=%CUDA_PATH%\include;src;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Save to GitHub env
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=1>> %GITHUB_ENV%
          echo TORCH_CUDA_ARCH_LIST=8.0>> %GITHUB_ENV%
          echo CL=/MP1 /O1 /GS- /Gy /Gw>> %GITHUB_ENV%
          echo NVCC_APPEND_FLAGS=--threads 1 --optimize 1 --use_fast_math --ptxas-options=-v --maxrregcount=128 -Xcompiler "/wd4819 /wd4251 /wd4244 /wd4267 /wd4275 /wd4018 /wd4190 /wd4624 /wd4067 /wd4068">> %GITHUB_ENV%
          echo CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread>> %GITHUB_ENV%
          echo CUTLASS_NVCC_ARCHS=80>> %GITHUB_ENV%
          echo CUDA_HOME=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDACXX=%CUDA_PATH%\bin\nvcc.exe>> %GITHUB_ENV%

      - name: Configure setup.py for memory-efficient build
        shell: powershell
        run: |
          # Check if setup.py exists and create a backup
          if (Test-Path "setup.py") {
              Copy-Item "setup.py" "setup.py.backup"
              
              # Read setup.py content
              $setupContent = Get-Content "setup.py" -Raw
              
              # Check if we need to add memory optimization flags
              if ($setupContent -notmatch "extra_compile_args") {
                  Write-Host "Adding memory optimization flags to setup.py..."
                  
                  # Add optimization flags for nvcc
                  $optimizationCode = @"

# Memory optimization for CUDA compilation
import os
os.environ['TORCH_CUDA_ARCH_LIST'] = '8.0'
os.environ['MAX_JOBS'] = '1'
os.environ['NVCC_APPEND_FLAGS'] = '--threads 1 --optimize 1 --use_fast_math --maxrregcount=128'

"@
                  
                  # Insert at the beginning of the file after imports
                  $lines = $setupContent -split "`n"
                  $insertIndex = 0
                  for ($i = 0; $i -lt $lines.Count; $i++) {
                      if ($lines[$i] -match "^from|^import" -and $lines[$i+1] -notmatch "^from|^import") {
                          $insertIndex = $i + 1
                          break
                      }
                  }
                  
                  $lines = $lines[0..$insertIndex] + $optimizationCode + $lines[($insertIndex+1)..($lines.Count-1)]
                  $setupContent = $lines -join "`n"
                  
                  Set-Content "setup.py" $setupContent -Encoding UTF8
                  Write-Host "Memory optimization flags added to setup.py"
              }
          }

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          if exist *.egg-info rd /s /q *.egg-info
          
          REM Also clean CUDA cache
          if exist "%LOCALAPPDATA%\NVIDIA\ComputeCache" rd /s /q "%LOCALAPPDATA%\NVIDIA\ComputeCache"

      # Attempt to create missing files if needed
      - name: Create missing interop files (if needed)
        shell: powershell
        run: |
          # Only create if src/interop exists but torch.h is missing
          if ((Test-Path "src/interop") -and -not (Test-Path "src/interop/torch.h")) {
              Write-Host "Creating placeholder interop/torch.h..."
              
              # Create a minimal torch.h that includes the actual PyTorch headers
              $content = "#pragma once`n#include <torch/torch.h>`n#include <torch/extension.h>`n"
              [System.IO.File]::WriteAllText("src/interop/torch.h", $content, [System.Text.Encoding]::ASCII)
              Write-Host "Created minimal src/interop/torch.h"
          }

      - name: Monitor memory during build
        shell: powershell
        run: |
          # Start a background job to monitor memory usage
          $monitorJob = Start-Job -ScriptBlock {
              while ($true) {
                  $mem = Get-WmiObject -Class Win32_OperatingSystem
                  $totalMem = $mem.TotalVisibleMemorySize / 1MB
                  $freeMem = $mem.FreePhysicalMemory / 1MB
                  $usedMem = $totalMem - $freeMem
                  $percentUsed = [math]::Round(($usedMem / $totalMem) * 100, 2)
                  
                  $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                  "$timestamp - Memory Usage: $([math]::Round($usedMem, 2)) MB / $([math]::Round($totalMem, 2)) MB ($percentUsed%)"
                  
                  Start-Sleep -Seconds 30
              }
          }
          
          # Save job ID for later cleanup
          $monitorJob.Id | Out-File -FilePath "monitor_job_id.txt"

      - name: Build wheel with memory monitoring
        shell: cmd
        run: |
          echo Starting wheel build with memory optimizations...
          
          REM Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM Set all environment variables again
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          set PATH=%CUDA_PATH%\bin;%PATH%
          
          REM Critical memory settings
          set MAX_JOBS=1
          set TORCH_CUDA_ARCH_LIST=8.0
          set NVCC_APPEND_FLAGS=--threads 1 --optimize 1 --use_fast_math --maxrregcount=128
          set CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread
          
          REM Ensure include paths are set correctly
          set INCLUDE=%CUDA_PATH%\include;src;src\interop;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;third_party\Block-Sparse-Attention\csrc\block_sparse_attn;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Try to build with memory-efficient settings
          echo Building with MAX_JOBS=1 to prevent memory exhaustion...
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo [ERROR] Build failed with error code %ERRORLEVEL%
              
              REM Try alternative build command with even more conservative settings
              echo Trying alternative build with setup.py directly and minimal settings...
              set TORCH_CUDA_ARCH_LIST=8.0
              set MAX_JOBS=1
              set NVCC_THREADS=1
              
              python setup.py bdist_wheel --plat-name win_amd64
              
              if %ERRORLEVEL% neq 0 (
                  echo [ERROR] Alternative build also failed
                  
                  REM Last resort: try building specific components separately
                  echo Attempting component-wise build...
                  python setup.py build_ext --inplace
                  if %ERRORLEVEL% equ 0 (
                      python setup.py bdist_wheel
                  )
              )
          )

      - name: Stop memory monitoring
        shell: powershell
        if: always()
        run: |
          if (Test-Path "monitor_job_id.txt") {
              $jobId = Get-Content "monitor_job_id.txt"
              Stop-Job -Id $jobId -ErrorAction SilentlyContinue
              Remove-Job -Id $jobId -ErrorAction SilentlyContinue
              Remove-Item "monitor_job_id.txt"
          }

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "Built wheel files:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  $size = [math]::Round($_.Length/1MB, 2)
                  Write-Host "  - $($_.Name) ($size MB)"
              }
          } else {
              Write-Error "No wheel files found"
              
              # Check if there are any build artifacts
              Write-Host "`nChecking for build artifacts:"
              if (Test-Path "build") {
                  Get-ChildItem "build" -Recurse -Filter "*.pyd" | ForEach-Object {
                      Write-Host "Found extension: $($_.FullName)"
                  }
              }
              
              exit 1
          }

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-failure-logs
          path: |
            *.log
            build/**/*.log
            setup.py
            setup.py.backup
            pyproject.toml
            build/temp*/**/*.d
            build/temp*/**/*.obj.d
          retention-days: 7

      - name: Collect detailed error information on failure
        if: failure()
        shell: powershell
        run: |
          Write-Host "Collecting detailed error information..."
          
          # Find and display last few lines of nvcc error output
          Get-ChildItem -Path . -Filter "*.log" -Recurse | ForEach-Object {
              Write-Host "`n=== Content of $($_.FullName) ==="
              Get-Content $_.FullName -Tail 100
          }
          
          # Check for CUDA compilation artifacts
          if (Test-Path "build") {
              Write-Host "`n=== CUDA compilation artifacts ==="
              Get-ChildItem -Path "build" -Filter "*.cu.obj" -Recurse | ForEach-Object {
                  Write-Host "Found: $($_.FullName) - Size: $($_.Length) bytes"
              }
          }
