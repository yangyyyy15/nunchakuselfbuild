name: Windows Build - Optimized CUDA Installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # Step 1: Validate version compatibility
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      cuda_full_version: ${{ steps.check.outputs.cuda_full_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
      torchvision_version: ${{ steps.check.outputs.torchvision_version }}
      torchaudio_version: ${{ steps.check.outputs.torchaudio_version }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix
          COMPATIBLE=false
          CUDA_FULL_VERSION=""
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.1.1"
                  ;;
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
              esac
              TORCHVISION_VERSION="0.20"
              TORCHAUDIO_VERSION="2.5"
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
                "12.6") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.6.2"
                  ;;
              esac
              TORCHVISION_VERSION="0.21"
              TORCHAUDIO_VERSION="2.6"
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.8.0"
                  ;;
              esac
              TORCHVISION_VERSION="0.22"
              TORCHAUDIO_VERSION="2.7"
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination"
            exit 1
          fi
          
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          echo "cuda_full_version=$CUDA_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "torchvision_version=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
          echo "torchaudio_version=$TORCHAUDIO_VERSION" >> $GITHUB_OUTPUT
          
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  # Step 2: Main build job with optimized resource usage
  build-windows-wheel:
    runs-on: windows-2022
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    # Increase timeout for large builds
    timeout-minutes: 180
    strategy:
      matrix:
        # Split builds by CUDA architectures to reduce memory usage
        cuda_arch_group: ['sm_75_80', 'sm_86_89']
    steps:
      - name: Increase pagefile size
        shell: powershell
        run: |
          Write-Host "Current pagefile settings:"
          Get-WmiObject -Class Win32_PageFileSetting | Select-Object Name, InitialSize, MaximumSize
          
          # Increase pagefile to 16GB (16384 MB)
          $pagefile = Get-WmiObject -Query "SELECT * FROM Win32_PageFileSetting WHERE Name = 'C:\\pagefile.sys'"
          if ($pagefile) {
              $pagefile.Delete()
          }
          
          # Set new pagefile with 16GB initial and 32GB maximum
          $computersystem = Get-WmiObject Win32_ComputerSystem
          $computersystem.AutomaticManagedPagefile = $false
          $computersystem.Put()
          
          Set-WmiInstance -Class Win32_PageFileSetting -Arguments @{
              Name = "C:\pagefile.sys"
              InitialSize = 16384
              MaximumSize = 32768
          }
          
          Write-Host "Updated pagefile settings (will take effect after restart)"

      - name: Cleanup disk space
        shell: powershell
        run: |
          Write-Host "Freeing up disk space..."
          
          # Remove unnecessary Windows components
          Remove-Item -Path "C:\hostedtoolcache\windows\go" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\hostedtoolcache\windows\Ruby" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\hostedtoolcache\windows\node" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Clear temp files
          Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Show available disk space
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name="Free(GB)";Expression={[math]::Round($_.Free/1GB,2)}}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Initialize and verify submodules
      - name: Initialize and update submodules
        shell: powershell
        run: |
          Write-Host "Initializing git submodules..."
          git submodule update --init --recursive --force
          
          Write-Host "`nSubmodule status:"
          git submodule status
          
          Write-Host "`nVerifying submodule directories:"
          $submodulePaths = git config --file .gitmodules --get-regexp path | ForEach-Object { $_.Split(' ')[1] }
          foreach ($path in $submodulePaths) {
              if (Test-Path $path) {
                  Write-Host "[OK] Found submodule: $path"
              } else {
                  Write-Warning "[WARNING] Missing submodule: $path"
              }
          }

      # Download missing third-party dependencies if not submodules
      - name: Setup third-party dependencies
        shell: powershell
        run: |
          Write-Host "Checking and setting up third-party dependencies..."
          
          # Create third_party directory if needed
          if (-not (Test-Path "third_party")) {
              New-Item -ItemType Directory -Path "third_party"
          }
          
          # Download spdlog if missing
          if (-not (Test-Path "third_party/spdlog/include/spdlog/spdlog.h")) {
              Write-Host "Downloading spdlog..."
              if (Test-Path "third_party/spdlog") {
                  Remove-Item -Path "third_party/spdlog" -Recurse -Force
              }
              git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git third_party/spdlog
          }
          
          # Download other dependencies if needed
          $dependencies = @{
              "json" = "https://github.com/nlohmann/json.git"
              "mio" = "https://github.com/mandreyel/mio.git"
          }
          
          foreach ($dep in $dependencies.Keys) {
              if (-not (Test-Path "third_party/$dep")) {
                  Write-Host "Downloading $dep..."
                  git clone --depth 1 $dependencies[$dep] "third_party/$dep"
              }
          }
          
          # Verify critical files exist
          Write-Host "`nVerifying critical files:"
          $criticalFiles = @(
              "third_party/spdlog/include/spdlog/spdlog.h",
              "third_party/json/include/nlohmann/json.hpp",
              "third_party/cutlass/include/cutlass/cutlass.h"
          )
          
          foreach ($file in $criticalFiles) {
              if (Test-Path $file) {
                  Write-Host "[OK] Found: $file"
              } else {
                  Write-Warning "[WARNING] Missing: $file"
              }
          }

      # Verify source structure
      - name: Verify project structure
        shell: powershell
        run: |
          Write-Host "Verifying project structure..."
          
          # Check for src/interop directory and files
          if (Test-Path "src/interop") {
              Write-Host "[OK] Found src/interop directory"
              $interopFiles = Get-ChildItem "src/interop" -Filter "*.h" -ErrorAction SilentlyContinue
              if ($interopFiles) {
                  Write-Host "Header files in src/interop:"
                  $interopFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
              } else {
                  Write-Error "[ERROR] No header files found in src/interop"
                  
                  # Try to find torch.h elsewhere
                  Write-Host "`nSearching for torch.h in the project:"
                  Get-ChildItem -Path . -Filter "torch.h" -Recurse -ErrorAction SilentlyContinue | 
                      Select-Object -First 5 | ForEach-Object { Write-Host "  Found at: $($_.FullName)" }
              }
          } else {
              Write-Error "[ERROR] src/interop directory not found!"
              
              # List what's actually in src
              if (Test-Path "src") {
                  Write-Host "`nContents of src directory:"
                  Get-ChildItem "src" -Name | ForEach-Object { Write-Host "  - $_" }
              }
          }
          
          # Check all expected directories
          $expectedDirs = @(
              "src",
              "src/interop",
              "src/kernels",
              "nunchaku",
              "nunchaku/csrc",
              "third_party/cutlass",
              "third_party/json",
              "third_party/mio",
              "third_party/spdlog",
              "third_party/Block-Sparse-Attention"
          )
          
          $missingDirs = @()
          foreach ($dir in $expectedDirs) {
              if (Test-Path $dir) {
                  Write-Host "[OK] Found: $dir"
              } else {
                  Write-Warning "[MISSING] $dir"
                  $missingDirs += $dir
              }
          }
          
          if ($missingDirs.Count -gt 0) {
              Write-Host "`nProject structure check failed. Missing directories:"
              $missingDirs | ForEach-Object { Write-Host "  - $_" }
              
              Write-Host "`nFull directory tree (first 3 levels):"
              Get-ChildItem -Recurse -Depth 2 -Directory | Select-Object -First 50 | 
                  ForEach-Object { Write-Host $_.FullName.Replace($PWD, ".") }
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Install CUDA using cuda-toolkit action
        uses: Jimver/cuda-toolkit@v0.2.23
        id: cuda-toolkit
        with:
          cuda: ${{ needs.validate-compatibility.outputs.cuda_full_version }}
          method: 'local'
          use-github-cache: true
          use-local-cache: true

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build packaging

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $torchvisionVersion = "${{ needs.validate-compatibility.outputs.torchvision_version }}"
          $torchaudioVersion = "${{ needs.validate-compatibility.outputs.torchaudio_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          pip install --no-cache-dir "torch==$torchVersion" "torchvision==$torchvisionVersion" "torchaudio==$torchaudioVersion" --index-url $indexUrl

      - name: Set optimized build environment variables
        shell: cmd
        run: |
          REM Core build settings
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          
          REM Significantly reduce parallelism to avoid resource exhaustion
          set MAX_JOBS=1
          set PARALLEL_LEVEL=1
          set CMAKE_BUILD_PARALLEL_LEVEL=1
          set NINJA_STATUS=[%%f/%%t %%es] 
          
          REM Disable multi-processor compilation to reduce memory usage
          set CL=/wd4819 /wd4251 /wd4244 /wd4267 /wd4275 /wd4018 /wd4190 /wd4624 /wd4067 /wd4068
          
          REM CUDA settings
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          
          REM Set CUDA architectures based on matrix
          if "${{ matrix.cuda_arch_group }}" == "sm_75_80" (
              set TORCH_CUDA_ARCH_LIST=7.5;8.0
              set CMAKE_CUDA_ARCHITECTURES=75;80
          ) else (
              set TORCH_CUDA_ARCH_LIST=8.6;8.9
              set CMAKE_CUDA_ARCHITECTURES=86;89
          )
          
          REM Limit NVCC parallelism
          set CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread
          
          REM Memory optimization flags
          set CUDAFLAGS=-Xfatbin -compress-all
          
          REM Update paths
          set INCLUDE=%CUDA_PATH%\include;src;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Save to GitHub env
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=1>> %GITHUB_ENV%
          echo PARALLEL_LEVEL=1>> %GITHUB_ENV%
          echo CMAKE_BUILD_PARALLEL_LEVEL=1>> %GITHUB_ENV%
          echo NINJA_STATUS=[%%f/%%t %%es] >> %GITHUB_ENV%
          echo CL=/wd4819 /wd4251 /wd4244 /wd4267 /wd4275 /wd4018 /wd4190 /wd4624 /wd4067 /wd4068>> %GITHUB_ENV%
          echo CUDA_HOME=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDACXX=%CUDA_PATH%\bin\nvcc.exe>> %GITHUB_ENV%
          echo CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread>> %GITHUB_ENV%
          echo CUDAFLAGS=-Xfatbin -compress-all>> %GITHUB_ENV%
          
          if "${{ matrix.cuda_arch_group }}" == "sm_75_80" (
              echo TORCH_CUDA_ARCH_LIST=7.5;8.0>> %GITHUB_ENV%
              echo CMAKE_CUDA_ARCHITECTURES=75;80>> %GITHUB_ENV%
          ) else (
              echo TORCH_CUDA_ARCH_LIST=8.6;8.9>> %GITHUB_ENV%
              echo CMAKE_CUDA_ARCHITECTURES=86;89>> %GITHUB_ENV%
          )

      - name: Monitor system resources
        shell: powershell
        run: |
          Write-Host "System resource status before build:"
          
          # Memory info
          $mem = Get-WmiObject Win32_OperatingSystem
          $totalMem = [math]::Round($mem.TotalVisibleMemorySize/1MB, 2)
          $freeMem = [math]::Round($mem.FreePhysicalMemory/1MB, 2)
          $usedMem = $totalMem - $freeMem
          Write-Host "Memory: Used $usedMem GB / Total $totalMem GB (Free: $freeMem GB)"
          
          # CPU info
          $cpu = Get-WmiObject Win32_Processor
          Write-Host "CPU: $($cpu.Name) - $($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) logical processors"
          
          # Disk space
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name="Free(GB)";Expression={[math]::Round($_.Free/1GB,2)}}, @{Name="Used(GB)";Expression={[math]::Round($_.Used/1GB,2)}}

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          if exist *.egg-info rd /s /q *.egg-info
          if exist .cache rd /s /q .cache

      # Attempt to create missing files if needed
      - name: Create missing interop files (if needed)
        shell: powershell
        run: |
          # Only create if src/interop exists but torch.h is missing
          if ((Test-Path "src/interop") -and -not (Test-Path "src/interop/torch.h")) {
              Write-Host "Creating placeholder interop/torch.h..."
              
              # Create a minimal torch.h that includes the actual PyTorch headers
              $content = "#pragma once`n#include <torch/torch.h>`n#include <torch/extension.h>`n"
              [System.IO.File]::WriteAllText("src/interop/torch.h", $content, [System.Text.Encoding]::ASCII)
              Write-Host "Created minimal src/interop/torch.h"
          }

      - name: Pre-build setup.py modifications
        shell: python
        run: |
          import os
          import re
          
          # Read setup.py
          with open('setup.py', 'r') as f:
              content = f.read()
          
          # Check if we need to add resource limiting code
          if 'resource limiting' not in content:
              # Find the place to insert our modifications (after imports)
              insert_pos = content.find('from setuptools')
              if insert_pos == -1:
                  insert_pos = content.find('import')
              
              # Find the end of imports section
              lines = content[:insert_pos + 200].split('\n')
              import_end = 0
              for i, line in enumerate(lines):
                  if line and not line.startswith(('import', 'from')) and not line.strip() == '':
                      import_end = len('\n'.join(lines[:i]))
                      break
              
              # Insert resource limiting code
              resource_code = '''
          # Resource limiting for GitHub Actions
          import os
          if os.environ.get('GITHUB_ACTIONS') == 'true':
              os.environ['MAX_JOBS'] = '1'
              os.environ['PARALLEL_LEVEL'] = '1'
              os.environ['CMAKE_BUILD_PARALLEL_LEVEL'] = '1'
              # Reduce ninja parallelism
              os.environ['NINJA_STATUS'] = '[%f/%t %es] '
              # Set compilation flags for reduced memory usage
              if 'extra_compile_args' in locals():
                  if 'nvcc' in extra_compile_args:
                      extra_compile_args['nvcc'].extend(['--threads', '1', '--default-stream', 'per-thread'])
          '''
              
              content = content[:import_end] + resource_code + content[import_end:]
              
              # Write back
              with open('setup.py', 'w') as f:
                  f.write(content)
              
              print("Modified setup.py with resource limits")

      - name: Build wheel with retry mechanism
        shell: cmd
        run: |
          echo Starting wheel build for CUDA architectures: ${{ matrix.cuda_arch_group }}
          
          REM Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM Set all environment variables again
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          set PATH=%CUDA_PATH%\bin;%PATH%
          
          REM Force single-threaded builds
          set MAX_JOBS=1
          set PARALLEL_LEVEL=1
          set CMAKE_BUILD_PARALLEL_LEVEL=1
          set CUDA_NVCC_FLAGS=--threads 1 --default-stream per-thread
          
          REM Set architecture-specific variables
          if "${{ matrix.cuda_arch_group }}" == "sm_75_80" (
              set TORCH_CUDA_ARCH_LIST=7.5;8.0
              set CMAKE_CUDA_ARCHITECTURES=75;80
          ) else (
              set TORCH_CUDA_ARCH_LIST=8.6;8.9
              set CMAKE_CUDA_ARCHITECTURES=86;89
          )
          
          REM Ensure include paths are set correctly
          set INCLUDE=%CUDA_PATH%\include;src;src\interop;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;third_party\Block-Sparse-Attention\csrc\block_sparse_attn;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM First attempt - with reduced parallelism
          echo [ATTEMPT 1/3] Building with minimal parallelism...
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo [ATTEMPT 1 FAILED] First build attempt failed, cleaning and retrying...
              
              REM Clean build artifacts
              if exist build rd /s /q build
              if exist _skbuild rd /s /q _skbuild
              
              REM Second attempt - direct setup.py with verbose output
              echo [ATTEMPT 2/3] Trying direct setup.py build with verbose output...
              set DISTUTILS_DEBUG=1
              python setup.py bdist_wheel --verbose
              
              if %ERRORLEVEL% neq 0 (
                  echo [ATTEMPT 2 FAILED] Second attempt failed, trying minimal build...
                  
                  REM Clean again
                  if exist build rd /s /q build
                  if exist _skbuild rd /s /q _skbuild
                  
                  REM Third attempt - with minimal features
                  echo [ATTEMPT 3/3] Final attempt with minimal configuration...
                  set NUNCHAKU_INSTALL_MODE=MINIMAL
                  python setup.py bdist_wheel
                  
                  if %ERRORLEVEL% neq 0 (
                      echo [ERROR] All build attempts failed
                      exit /b 1
                  )
              )
          )
          
          echo [SUCCESS] Build completed successfully!

      - name: Post-build resource check
        shell: powershell
        if: always()
        run: |
          Write-Host "System resource status after build:"
          
          # Memory info
          $mem = Get-WmiObject Win32_OperatingSystem
          $totalMem = [math]::Round($mem.TotalVisibleMemorySize/1MB, 2)
          $freeMem = [math]::Round($mem.FreePhysicalMemory/1MB, 2)
          $usedMem = $totalMem - $freeMem
          Write-Host "Memory: Used $usedMem GB / Total $totalMem GB (Free: $freeMem GB)"
          
          # Check for memory pressure events
          $events = Get-WinEvent -FilterHashtable @{LogName='System'; ID=2004} -MaxEvents 10 -ErrorAction SilentlyContinue
          if ($events) {
              Write-Warning "Memory pressure events detected during build:"
              $events | ForEach-Object { Write-Host $_.Message }
          }

      - name: Merge wheels from different architectures
        if: matrix.cuda_arch_group == 'sm_86_89'
        shell: powershell
        run: |
          # This step only runs for the second matrix job
          # Download wheels from the first job and merge if necessary
          Write-Host "Checking for wheels to merge..."
          
          if (Test-Path "dist") {
              $wheels = Get-ChildItem "dist/*.whl"
              Write-Host "Found $($wheels.Count) wheel(s) in current build"
              
              # If your build process creates architecture-specific wheels,
              # you might need to merge them here
              # For now, we'll just list what we have
              $wheels | ForEach-Object {
                  $size = [math]::Round($_.Length/1MB, 2)
                  Write-Host "  - $($_.Name) ($size MB)"
              }
          }

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "Built wheel files:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  $size = [math]::Round($_.Length/1MB, 2)
                  Write-Host "  - $($_.Name) ($size MB)"
                  
                  # Verify wheel integrity
                  python -m pip wheel --no-deps --no-build-isolation --check-build-dependencies "$($_.FullName)" -w temp_check
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "  [OK] Wheel verification passed"
                  } else {
                      Write-Error "  [ERROR] Wheel verification failed"
                  }
                  Remove-Item -Path temp_check -Recurse -Force -ErrorAction SilentlyContinue
              }
          } else {
              Write-Error "No wheel files found"
              exit 1
          }

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}-${{ matrix.cuda_arch_group }}
          path: dist/*.whl
          retention-days: 30

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-failure-logs-${{ matrix.cuda_arch_group }}
          path: |
            *.log
            build/**/*.log
            setup.py
            pyproject.toml
            build/temp*/**/*.obj.d
          retention-days: 7

  # Step 3: Combine wheels from different architecture groups
  combine-wheels:
    runs-on: ubuntu-latest
    needs: [build-windows-wheel, validate-compatibility]
    if: always() && needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}-*
          merge-multiple: true
          path: dist/

      - name: List all downloaded wheels
        run: |
          echo "Downloaded wheels:"
          ls -la dist/ || echo "No wheels found"

      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}-combined
          path: dist/*.whl
          retention-days: 30
