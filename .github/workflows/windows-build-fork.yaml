name: Windows Build - Optimized CUDA Installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # Step 1: Validate version compatibility
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      cuda_full_version: ${{ steps.check.outputs.cuda_full_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
      torchvision_version: ${{ steps.check.outputs.torchvision_version }}
      torchaudio_version: ${{ steps.check.outputs.torchaudio_version }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix
          COMPATIBLE=false
          CUDA_FULL_VERSION=""
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.1.1"
                  ;;
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
              esac
              TORCHVISION_VERSION="0.20"
              TORCHAUDIO_VERSION="2.5"
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
                "12.6") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.6.2"
                  ;;
              esac
              TORCHVISION_VERSION="0.21"
              TORCHAUDIO_VERSION="2.6"
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.8.0"
                  ;;
              esac
              TORCHVISION_VERSION="0.22"
              TORCHAUDIO_VERSION="2.7"
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination"
            exit 1
          fi
          
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          echo "cuda_full_version=$CUDA_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "torchvision_version=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
          echo "torchaudio_version=$TORCHAUDIO_VERSION" >> $GITHUB_OUTPUT
          
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  # Step 2: Main build job
  build-windows-wheel:
    runs-on: windows-2022
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive  # Changed from true to recursive

      # CRITICAL: Initialize and verify submodules
      - name: Initialize and update submodules
        shell: powershell
        run: |
          Write-Host "Initializing git submodules..."
          git submodule update --init --recursive --force
          
          Write-Host "`nSubmodule status:"
          git submodule status
          
          Write-Host "`nVerifying submodule directories:"
          $submodulePaths = git config --file .gitmodules --get-regexp path | ForEach-Object { $_.Split(' ')[1] }
          foreach ($path in $submodulePaths) {
              if (Test-Path $path) {
                  Write-Host "[OK] Found submodule: $path"
              } else {
                  Write-Warning "[WARNING] Missing submodule: $path"
              }
          }

      # Download missing third-party dependencies if not submodules
      - name: Setup third-party dependencies
        shell: powershell
        run: |
          Write-Host "Checking and setting up third-party dependencies..."
          
          # Create third_party directory if needed
          if (-not (Test-Path "third_party")) {
              New-Item -ItemType Directory -Path "third_party"
          }
          
          # Download spdlog if missing
          if (-not (Test-Path "third_party/spdlog/include/spdlog/spdlog.h")) {
              Write-Host "Downloading spdlog..."
              if (Test-Path "third_party/spdlog") {
                  Remove-Item -Path "third_party/spdlog" -Recurse -Force
              }
              git clone --depth 1 --branch v1.12.0 https://github.com/gabime/spdlog.git third_party/spdlog
          }
          
          # Download other dependencies if needed
          $dependencies = @{
              "json" = "https://github.com/nlohmann/json.git"
              "mio" = "https://github.com/mandreyel/mio.git"
          }
          
          foreach ($dep in $dependencies.Keys) {
              if (-not (Test-Path "third_party/$dep")) {
                  Write-Host "Downloading $dep..."
                  git clone --depth 1 $dependencies[$dep] "third_party/$dep"
              }
          }
          
          # Verify critical files exist
          Write-Host "`nVerifying critical files:"
          $criticalFiles = @(
              "third_party/spdlog/include/spdlog/spdlog.h",
              "third_party/json/include/nlohmann/json.hpp",
              "third_party/cutlass/include/cutlass/cutlass.h"
          )
          
          foreach ($file in $criticalFiles) {
              if (Test-Path $file) {
                  Write-Host "[OK] Found: $file"
              } else {
                  Write-Warning "[WARNING] Missing: $file"
              }
          }

      # Verify source structure
      - name: Verify project structure
        shell: powershell
        run: |
          Write-Host "Verifying project structure..."
          
          # Check for src/interop directory and files
          if (Test-Path "src/interop") {
              Write-Host "[OK] Found src/interop directory"
              $interopFiles = Get-ChildItem "src/interop" -Filter "*.h" -ErrorAction SilentlyContinue
              if ($interopFiles) {
                  Write-Host "Header files in src/interop:"
                  $interopFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
              } else {
                  Write-Error "[ERROR] No header files found in src/interop"
                  
                  # Try to find torch.h elsewhere
                  Write-Host "`nSearching for torch.h in the project:"
                  Get-ChildItem -Path . -Filter "torch.h" -Recurse -ErrorAction SilentlyContinue | 
                      Select-Object -First 5 | ForEach-Object { Write-Host "  Found at: $($_.FullName)" }
              }
          } else {
              Write-Error "[ERROR] src/interop directory not found!"
              
              # List what's actually in src
              if (Test-Path "src") {
                  Write-Host "`nContents of src directory:"
                  Get-ChildItem "src" -Name | ForEach-Object { Write-Host "  - $_" }
              }
          }
          
          # Check all expected directories
          $expectedDirs = @(
              "src",
              "src/interop",
              "src/kernels",
              "nunchaku",
              "nunchaku/csrc",
              "third_party/cutlass",
              "third_party/json",
              "third_party/mio",
              "third_party/spdlog",
              "third_party/Block-Sparse-Attention"
          )
          
          $missingDirs = @()
          foreach ($dir in $expectedDirs) {
              if (Test-Path $dir) {
                  Write-Host "[OK] Found: $dir"
              } else {
                  Write-Warning "[MISSING] $dir"
                  $missingDirs += $dir
              }
          }
          
          if ($missingDirs.Count -gt 0) {
              Write-Host "`nProject structure check failed. Missing directories:"
              $missingDirs | ForEach-Object { Write-Host "  - $_" }
              
              Write-Host "`nFull directory tree (first 3 levels):"
              Get-ChildItem -Recurse -Depth 2 -Directory | Select-Object -First 50 | 
                  ForEach-Object { Write-Host $_.FullName.Replace($PWD, ".") }
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Install CUDA using cuda-toolkit action
        uses: Jimver/cuda-toolkit@v0.2.23
        id: cuda-toolkit
        with:
          cuda: ${{ needs.validate-compatibility.outputs.cuda_full_version }}
          method: 'local'
          use-github-cache: true
          use-local-cache: true

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build packaging

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $torchvisionVersion = "${{ needs.validate-compatibility.outputs.torchvision_version }}"
          $torchaudioVersion = "${{ needs.validate-compatibility.outputs.torchaudio_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          pip install --no-cache-dir "torch==$torchVersion" "torchvision==$torchvisionVersion" "torchaudio==$torchaudioVersion" --index-url $indexUrl

      - name: Set build environment variables
        shell: cmd
        run: |
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=2
          set CL=/MP
          
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          
          REM Update paths to include all necessary directories
          set INCLUDE=%CUDA_PATH%\include;src;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Save to GitHub env
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=2>> %GITHUB_ENV%
          echo CL=/MP>> %GITHUB_ENV%
          echo CUDA_HOME=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDACXX=%CUDA_PATH%\bin\nvcc.exe>> %GITHUB_ENV%

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          if exist *.egg-info rd /s /q *.egg-info

      # Attempt to create missing files if needed
      - name: Create missing interop files (if needed)
        shell: powershell
        run: |
          # Only create if src/interop exists but torch.h is missing
          if ((Test-Path "src/interop") -and -not (Test-Path "src/interop/torch.h")) {
              Write-Host "Creating placeholder interop/torch.h..."
              
              # Create a minimal torch.h that includes the actual PyTorch headers
              $torchHeader = @"
#pragma once
#include <torch/torch.h>
#include <torch/extension.h>
"@
              $torchHeader | Out-File -FilePath "src/interop/torch.h" -Encoding ASCII
              Write-Host "Created minimal src/interop/torch.h"
          }

      - name: Build wheel
        shell: cmd
        run: |
          echo Starting wheel build...
          
          REM Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM Set all environment variables again
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          set PATH=%CUDA_PATH%\bin;%PATH%
          
          REM Ensure include paths are set correctly
          set INCLUDE=%CUDA_PATH%\include;src;src\interop;third_party\spdlog\include;third_party\json\include;third_party\mio\include;third_party\cutlass\include;third_party\Block-Sparse-Attention\csrc\block_sparse_attn;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Build
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo [ERROR] Build failed with error code %ERRORLEVEL%
              
              REM Try alternative build command
              echo Trying alternative build with setup.py directly...
              python setup.py bdist_wheel
              
              if %ERRORLEVEL% neq 0 (
                  echo [ERROR] Alternative build also failed
                  exit /b 1
              )
          )

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "Built wheel files:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  $size = [math]::Round($_.Length/1MB, 2)
                  Write-Host "  - $($_.Name) ($size MB)"
              }
          } else {
              Write-Error "No wheel files found"
              exit 1
          }

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-failure-logs
          path: |
            *.log
            build/**/*.log
            setup.py
            pyproject.toml
          retention-days: 7
