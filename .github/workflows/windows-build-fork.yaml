name: Windows Build - Fixed Dependencies

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.11'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.5'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.4'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      cuda_full_version: ${{ steps.check.outputs.cuda_full_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
      torchvision_version: ${{ steps.check.outputs.torchvision_version }}
      torchaudio_version: ${{ steps.check.outputs.torchaudio_version }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.11' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.5' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.4' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix
          COMPATIBLE=false
          CUDA_FULL_VERSION=""
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.1.1"
                  ;;
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
              esac
              TORCHVISION_VERSION="0.20"
              TORCHAUDIO_VERSION="2.5"
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
                "12.6") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.6.2"
                  ;;
              esac
              TORCHVISION_VERSION="0.21"
              TORCHAUDIO_VERSION="2.6"
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.8.0"
                  ;;
              esac
              TORCHVISION_VERSION="0.22"
              TORCHAUDIO_VERSION="2.7"
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination"
            exit 1
          fi
          
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          echo "cuda_full_version=$CUDA_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "torchvision_version=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
          echo "torchaudio_version=$TORCHAUDIO_VERSION" >> $GITHUB_OUTPUT
          
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  build-windows-wheel:
    runs-on: windows-2022
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive  # Changed from 'true' to 'recursive'

      # Fix 1: Initialize and update submodules explicitly
      - name: Initialize and update submodules
        shell: cmd
        run: |
          echo Initializing git submodules...
          git submodule update --init --recursive --depth 1
          
          echo Checking submodule status...
          git submodule status
          
          REM Check if third_party directories exist and have content
          if exist "third_party\spdlog" (
              echo [OK] Found third_party\spdlog
              dir "third_party\spdlog" /B | findstr /R "." >nul || (
                  echo [ERROR] third_party\spdlog is empty
                  exit /b 1
              )
          ) else (
              echo [ERROR] third_party\spdlog not found
              exit /b 1
          )
          
          if exist "third_party\cutlass" (
              echo [OK] Found third_party\cutlass
          ) else (
              echo [WARNING] third_party\cutlass not found
          )
          
          if exist "third_party\json" (
              echo [OK] Found third_party\json
          ) else (
              echo [WARNING] third_party\json not found
          )

      # Fix 2: Download missing dependencies if submodules fail
      - name: Download missing dependencies
        shell: powershell
        run: |
          Write-Host "Checking and downloading missing dependencies..."
          
          # Create directories if they don't exist
          $thirdPartyDirs = @{
              "spdlog" = "https://github.com/gabime/spdlog/archive/refs/tags/v1.12.0.zip"
              "json" = "https://github.com/nlohmann/json/releases/download/v3.11.2/include.zip"
              "mio" = "https://github.com/mandreyel/mio/archive/refs/heads/master.zip"
          }
          
          foreach ($dep in $thirdPartyDirs.GetEnumerator()) {
              $depPath = "third_party\$($dep.Key)"
              
              if (-not (Test-Path $depPath) -or (Get-ChildItem $depPath -Recurse | Measure-Object).Count -eq 0) {
                  Write-Host "Downloading $($dep.Key)..."
                  
                  $tempZip = "temp_$($dep.Key).zip"
                  Invoke-WebRequest -Uri $dep.Value -OutFile $tempZip
                  
                  # Extract to temp directory
                  $tempExtract = "temp_extract_$($dep.Key)"
                  Expand-Archive -Path $tempZip -DestinationPath $tempExtract -Force
                  
                  # Create third_party directory if it doesn't exist
                  if (-not (Test-Path "third_party")) {
                      New-Item -ItemType Directory -Path "third_party" -Force
                  }
                  
                  # Move extracted content to correct location
                  if (-not (Test-Path $depPath)) {
                      New-Item -ItemType Directory -Path $depPath -Force
                  }
                  
                  # Find the actual content directory (usually one level deep)
                  $extractedContent = Get-ChildItem $tempExtract -Directory | Select-Object -First 1
                  if ($extractedContent) {
                      Copy-Item -Path "$($extractedContent.FullName)\*" -Destination $depPath -Recurse -Force
                  }
                  
                  # Cleanup
                  Remove-Item $tempZip -Force
                  Remove-Item $tempExtract -Recurse -Force
                  
                  Write-Host "[OK] Downloaded $($dep.Key)"
              }
          }
          
          # Check if src/interop exists, if not create it with a basic torch.h
          if (-not (Test-Path "src\interop")) {
              Write-Host "Creating src\interop directory..."
              New-Item -ItemType Directory -Path "src\interop" -Force
              
              # Create a basic torch.h file
              @"
#pragma once
#include <torch/torch.h>
#include <torch/script.h>

namespace nunchaku {
namespace interop {
    // Basic torch interop utilities
}
}
"@ | Set-Content -Path "src\interop\torch.h"
              Write-Host "[OK] Created src\interop\torch.h"
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.11' }}

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.23
        id: cuda-toolkit
        with:
          cuda: ${{ needs.validate-compatibility.outputs.cuda_full_version }}
          method: 'local'
          use-github-cache: true
          use-local-cache: true

      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build packaging

      - name: Install PyTorch
        shell: powershell
        run: |
          $torchVersion = "${{ github.event.inputs.torch_version || '2.5' }}"
          $torchvisionVersion = "${{ needs.validate-compatibility.outputs.torchvision_version }}"
          $torchaudioVersion = "${{ needs.validate-compatibility.outputs.torchaudio_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          pip install --no-cache-dir "torch==$torchVersion" "torchvision==$torchvisionVersion" "torchaudio==$torchaudioVersion" --index-url $indexUrl

      # Fix 3: Create a setup.py if it doesn't exist or fix the existing one
      - name: Fix setup configuration
        shell: powershell
        run: |
          Write-Host "Checking setup configuration..."
          
          # Check if setup.py exists
          if (Test-Path "setup.py") {
              Write-Host "Found setup.py, checking for package configuration..."
              
              # Create a backup
              Copy-Item "setup.py" "setup.py.backup"
              
              # Read the setup.py content
              $setupContent = Get-Content "setup.py" -Raw
              
              # Check if it uses find_packages correctly
              if ($setupContent -notmatch "find_namespace_packages|find_packages") {
                  Write-Host "Adding find_packages to setup.py..."
                  # This is a simplified fix - in reality you'd need to parse and modify properly
              }
          }
          
          # Ensure pyproject.toml has correct configuration
          if (Test-Path "pyproject.toml") {
              Write-Host "Found pyproject.toml"
              $pyprojectContent = Get-Content "pyproject.toml" -Raw
              
              # Check if packages are properly defined
              if ($pyprojectContent -notmatch '\[tool\.setuptools\.packages\]') {
                  Write-Host "Adding package configuration to pyproject.toml..."
                  Add-Content -Path "pyproject.toml" -Value @"

[tool.setuptools.packages.find]
where = ["."]
include = ["nunchaku*"]
"@
              }
          }

      # Fix 4: Set include paths correctly
      - name: Set build environment
        shell: cmd
        run: |
          echo Setting build environment...
          
          REM Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          
          REM Set environment variables
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=2
          set CL=/MP
          
          REM CUDA environment
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          
          REM Include paths - add project directories
          set INCLUDE=%CD%\src;%CD%\third_party\spdlog\include;%CD%\third_party\json\include;%CD%\third_party\mio\include;%CD%\third_party\cutlass\include;%CUDA_PATH%\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Save to GitHub env
          echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
          echo LIB=%LIB%>> %GITHUB_ENV%
          echo CUDA_HOME=%CUDA_HOME%>> %GITHUB_ENV%
          echo CUDA_TOOLKIT_ROOT_DIR=%CUDA_TOOLKIT_ROOT_DIR%>> %GITHUB_ENV%
          echo CUDACXX=%CUDACXX%>> %GITHUB_ENV%
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=2>> %GITHUB_ENV%
          echo CL=/MP>> %GITHUB_ENV%

      - name: Build wheel
        shell: cmd
        run: |
          echo Starting build...
          
          REM Re-setup VS environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          
          REM Re-set critical paths with absolute paths
          set INCLUDE=%CD%\src;%CD%\third_party\spdlog\include;%CD%\third_party\json\include;%CD%\third_party\mio\include;%CUDA_PATH%\include;%INCLUDE%
          
          REM Verify paths exist
          echo Verifying include paths...
          if exist "%CD%\src\interop\torch.h" (
              echo [OK] Found src\interop\torch.h
          ) else (
              echo [ERROR] Missing src\interop\torch.h
              dir "%CD%\src" /S /B 2>nul | findstr /I "\.h$"
          )
          
          if exist "%CD%\third_party\spdlog\include\spdlog\spdlog.h" (
              echo [OK] Found spdlog.h
          ) else (
              echo [ERROR] Missing spdlog.h
              dir "%CD%\third_party" /S /B 2>nul | findstr /I "spdlog\.h$"
          )
          
          REM Try building
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo Build failed, attempting alternative build method...
              python setup.py bdist_wheel
          )

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-failure-logs
          path: |
            *.log
            build/**/*.log
            setup.py.backup
          retention-days: 7
