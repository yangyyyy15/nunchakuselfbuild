name: Windows Build Fork - Alternative CUDA Installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.4'
          - '12.8'

permissions:
  contents: write

jobs:
  # 方法1: 使用 Chocolatey 安装 CUDA
  build-windows-wheel-chocolatey:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2

      - name: Install Chocolatey (if not installed)
        run: |
          if (-not (Test-Path "$env:ChocolateyInstall\choco.exe")) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

      - name: Install CUDA via Chocolatey
        run: |
          # Note: Chocolatey might have older versions
          # Check available versions at https://community.chocolatey.org/packages/cuda
          choco install cuda -y --ignore-checksums
          
      - name: Verify CUDA installation
        run: |
          $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA"
          $cudaVersions = Get-ChildItem $cudaPath | Select-Object -First 1
          $env:CUDA_PATH = "$cudaPath\$($cudaVersions.Name)"
          $env:CUDA_HOME = $env:CUDA_PATH
          $env:PATH = "$env:CUDA_PATH\bin;$env:PATH"
          
          echo "CUDA_PATH=$env:CUDA_PATH" >> $env:GITHUB_ENV
          echo "CUDA_HOME=$env:CUDA_HOME" >> $env:GITHUB_ENV
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV
          
          nvcc --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build

      - name: Set versions and install PyTorch
        run: |
          $pythonVersion = "${{ github.event.inputs.python_version || '3.10' }}"
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $cudaVersion = "${{ github.event.inputs.cuda_version || '12.8' }}"
          $cudaShortVersion = $cudaVersion.Replace(".", "")
          
          # Set TorchVision and TorchAudio versions
          if ($torchVersion -eq "2.5") {
              $torchvisionVersion = "0.20"
              $torchaudioVersion = "2.5"
          } elseif ($torchVersion -eq "2.6") {
              $torchvisionVersion = "0.21"
              $torchaudioVersion = "2.6"
          } elseif ($torchVersion -eq "2.7") {
              $torchvisionVersion = "0.22"
              $torchaudioVersion = "2.7"
          }
          
          # Install PyTorch
          pip install --no-cache-dir torch==$torchVersion torchvision==$torchvisionVersion torchaudio==$torchaudioVersion --index-url https://download.pytorch.org/whl/cu$cudaShortVersion/

      - name: Build wheel
        shell: cmd
        run: |
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=4

          if exist build rd /s /q build
          python -m build --wheel --no-isolation

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-choco-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ github.event.inputs.cuda_version }}
          path: dist/*.whl

  # 方法2: 直接下载 CUDA 安装程序
  build-windows-wheel-direct:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2

      - name: Download and Install CUDA
        shell: powershell
        run: |
          $cudaVersion = "${{ github.event.inputs.cuda_version || '12.8' }}"
          
          # Define download URLs for different CUDA versions
          $cudaUrls = @{
              "12.4" = "https://developer.download.nvidia.com/compute/cuda/12.4.1/local_installers/cuda_12.4.1_551.78_windows.exe"
              "12.8" = "https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda_12.8.0_561.26_windows.exe"
          }
          
          # Get the download URL
          $downloadUrl = $cudaUrls[$cudaVersion]
          if (-not $downloadUrl) {
              Write-Error "Unknown CUDA version: $cudaVersion"
              exit 1
          }
          
          # Download CUDA installer
          Write-Host "Downloading CUDA $cudaVersion..."
          $installerPath = "cuda_installer.exe"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
          
          # Install CUDA silently (only toolkit components)
          Write-Host "Installing CUDA $cudaVersion..."
          Start-Process -FilePath $installerPath -ArgumentList "-s", "nvcc_$cudaVersion", "cudart_$cudaVersion", "curand_$cudaVersion", "cublas_$cudaVersion", "cusparse_$cudaVersion", "cusolver_$cudaVersion" -Wait
          
          # Set environment variables
          $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$cudaVersion"
          echo "CUDA_PATH=$cudaPath" >> $env:GITHUB_ENV
          echo "CUDA_HOME=$cudaPath" >> $env:GITHUB_ENV
          echo "$cudaPath\bin" >> $env:GITHUB_PATH

      - name: Verify CUDA installation
        run: |
          nvcc --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build

      - name: Set versions
        shell: cmd
        run: |
          set PYTHON_VERSION=${{ github.event.inputs.python_version || '3.10' }}
          set TORCH_VERSION=${{ github.event.inputs.torch_version || '2.7' }}
          set CUDA_VERSION=${{ github.event.inputs.cuda_version || '12.8' }}
          set CUDA_SHORT_VERSION=%CUDA_VERSION:.=%

          if "%TORCH_VERSION%"=="2.5" (
              set TORCHVISION_VERSION=0.20
              set TORCHAUDIO_VERSION=2.5
          ) else if "%TORCH_VERSION%"=="2.6" (
              set TORCHVISION_VERSION=0.21
              set TORCHAUDIO_VERSION=2.6
          ) else if "%TORCH_VERSION%"=="2.7" (
              set TORCHVISION_VERSION=0.22
              set TORCHAUDIO_VERSION=2.7
          )

          echo PYTHON_VERSION=%PYTHON_VERSION%>> %GITHUB_ENV%
          echo TORCH_VERSION=%TORCH_VERSION%>> %GITHUB_ENV%
          echo CUDA_VERSION=%CUDA_VERSION%>> %GITHUB_ENV%
          echo CUDA_SHORT_VERSION=%CUDA_SHORT_VERSION%>> %GITHUB_ENV%
          echo TORCHVISION_VERSION=%TORCHVISION_VERSION%>> %GITHUB_ENV%
          echo TORCHAUDIO_VERSION=%TORCHAUDIO_VERSION%>> %GITHUB_ENV%

      - name: Install PyTorch
        run: |
          pip install --no-cache-dir torch==${{ env.TORCH_VERSION }} torchvision==${{ env.TORCHVISION_VERSION }} torchaudio==${{ env.TORCHAUDIO_VERSION }} --index-url https://download.pytorch.org/whl/cu${{ env.CUDA_SHORT_VERSION }}/

      - name: Build wheel
        shell: cmd
        run: |
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=4

          if exist build rd /s /q build
          python -m build --wheel --no-isolation

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-direct-py${{ env.PYTHON_VERSION }}-torch${{ env.TORCH_VERSION }}-cuda${{ env.CUDA_VERSION }}
          path: dist/*.whl

  # 方法3: 仅使用 PyTorch 的 CUDA 运行时（如果不需要编译 CUDA 代码）
  build-windows-wheel-pytorch-only:
    runs-on: windows-latest
    if: false  # 默认禁用，如果您不需要 nvcc 编译器，可以启用这个方法
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build

      - name: Set versions and install PyTorch with CUDA
        shell: powershell
        run: |
          $pythonVersion = "${{ github.event.inputs.python_version || '3.10' }}"
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $cudaVersion = "${{ github.event.inputs.cuda_version || '12.8' }}"
          $cudaShortVersion = $cudaVersion.Replace(".", "")
          
          # Set TorchVision and TorchAudio versions
          if ($torchVersion -eq "2.5") {
              $torchvisionVersion = "0.20"
              $torchaudioVersion = "2.5"
          } elseif ($torchVersion -eq "2.6") {
              $torchvisionVersion = "0.21"
              $torchaudioVersion = "2.6"
          } elseif ($torchVersion -eq "2.7") {
              $torchvisionVersion = "0.22"
              $torchaudioVersion = "2.7"
          }
          
          # Install PyTorch with CUDA support (includes CUDA runtime)
          pip install --no-cache-dir torch==$torchVersion torchvision==$torchvisionVersion torchaudio==$torchaudioVersion --index-url https://download.pytorch.org/whl/cu$cudaShortVersion/
          
          # Set minimal CUDA environment variables from PyTorch
          $torchPath = python -c "import torch; import os; print(os.path.dirname(torch.__file__))"
          $cudaLibPath = Join-Path $torchPath "lib"
          
          echo "CUDA_VERSION=$cudaVersion" >> $env:GITHUB_ENV
          echo "CUDA_SHORT_VERSION=$cudaShortVersion" >> $env:GITHUB_ENV

      - name: Build wheel
        shell: cmd
        run: |
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=4

          if exist build rd /s /q build
          python -m build --wheel --no-isolation

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-pytorch-only-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ github.event.inputs.cuda_version }}
          path: dist/*.whl
