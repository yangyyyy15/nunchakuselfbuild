name: Windows Build - Fixed CUDA Version Issues

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # 验证版本兼容性
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # 定义兼容性矩阵
          COMPATIBLE=false
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1"|"12.4") COMPATIBLE=true ;;
              esac
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4"|"12.6") COMPATIBLE=true ;;
              esac
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") COMPATIBLE=true ;;
              esac
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "❌ 不兼容的版本组合: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
            echo "✅ 推荐组合:"
            echo "  - PyTorch 2.5: CUDA 12.1, 12.4"
            echo "  - PyTorch 2.6: CUDA 12.4, 12.6"
            echo "  - PyTorch 2.7: CUDA 12.8"
            exit 1
          fi
          
          echo "✅ 版本兼容: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
          
          # 输出结果
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          
          # 计算PyTorch索引URL使用的CUDA版本
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  # 主构建任务
  build-windows-wheel:
    runs-on: windows-2022  # 使用更新的运行环境
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Download and Install CUDA
        shell: powershell
        run: |
          $cudaVersion = "${{ needs.validate-compatibility.outputs.cuda_version }}"
          
          # 定义每个CUDA版本的正确下载URL
          $cudaUrls = @{
              "12.1" = "https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda_12.1.0_531.14_windows.exe"
              "12.4" = "https://developer.download.nvidia.com/compute/cuda/12.4.1/local_installers/cuda_12.4.1_551.78_windows.exe"
              "12.6" = "https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.76_windows.exe"
              "12.8" = "https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda_12.8.0_571.96_windows.exe"
          }
          
          # 获取下载URL
          $downloadUrl = $cudaUrls[$cudaVersion]
          if (-not $downloadUrl) {
              Write-Error "未找到CUDA版本 $cudaVersion 的下载链接"
              exit 1
          }
          
          Write-Host "正在下载CUDA $cudaVersion..."
          Write-Host "下载链接: $downloadUrl"
          
          $installerPath = "cuda_installer.exe"
          
          # 下载CUDA安装程序，带重试机制
          $maxRetries = 3
          $retryCount = 0
          
          do {
              try {
                  Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -TimeoutSec 1800
                  $downloadSuccess = $true
                  break
              } catch {
                  $retryCount++
                  Write-Host "下载失败 (尝试 $retryCount/$maxRetries): $($_.Exception.Message)"
                  if ($retryCount -ge $maxRetries) {
                      throw "下载CUDA安装程序失败: $($_.Exception.Message)"
                  }
                  Start-Sleep -Seconds 30
              }
          } while ($retryCount -lt $maxRetries)
          
          # 验证下载的文件
          if (-not (Test-Path $installerPath)) {
              Write-Error "CUDA安装程序下载失败"
              exit 1
          }
          
          $fileSize = (Get-Item $installerPath).Length / 1MB
          Write-Host "下载完成，文件大小: $([math]::Round($fileSize, 2)) MB"
          
          # 静默安装CUDA (只安装编译需要的组件)
          Write-Host "正在安装CUDA $cudaVersion..."
          $installArgs = @(
              "-s"  # 静默安装
              "nvcc_$cudaVersion"
              "cudart_$cudaVersion" 
              "curand_$cudaVersion"
              "cublas_$cudaVersion"
              "cusparse_$cudaVersion"
              "cusolver_$cudaVersion"
              "cufft_$cudaVersion"
              "curand_dev_$cudaVersion"
              "cublas_dev_$cudaVersion"
              "cusparse_dev_$cudaVersion"
              "cusolver_dev_$cudaVersion"
              "cufft_dev_$cudaVersion"
          )
          
          $process = Start-Process -FilePath $installerPath -ArgumentList $installArgs -Wait -PassThru -NoNewWindow
          
          if ($process.ExitCode -ne 0) {
              Write-Error "CUDA安装失败，退出代码: $($process.ExitCode)"
              exit 1
          }
          
          Write-Host "CUDA安装完成"
          
          # 设置环境变量
          $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$cudaVersion"
          
          if (-not (Test-Path $cudaPath)) {
              Write-Error "CUDA安装路径不存在: $cudaPath"
              exit 1
          }
          
          echo "CUDA_PATH=$cudaPath" >> $env:GITHUB_ENV
          echo "CUDA_HOME=$cudaPath" >> $env:GITHUB_ENV
          echo "$cudaPath\bin" >> $env:GITHUB_PATH
          echo "$cudaPath\libnvvp" >> $env:GITHUB_PATH

      - name: Verify CUDA installation
        shell: cmd
        run: |
          echo "验证CUDA安装..."
          echo "CUDA_PATH=%CUDA_PATH%"
          echo "CUDA_HOME=%CUDA_HOME%"
          
          nvcc --version
          if %ERRORLEVEL% neq 0 (
              echo "❌ nvcc命令失败"
              exit /b 1
          )
          
          echo "✅ CUDA安装验证成功"

      - name: Setup Visual Studio environment  
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'  # VS 2022

      - name: Setup Visual Studio Developer Command Prompt
        shell: cmd
        run: |
          echo "设置Visual Studio开发环境..."
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          if %ERRORLEVEL% neq 0 (
              echo "尝试使用BuildTools版本..."
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          echo "验证编译器..."
          cl
          if %ERRORLEVEL% neq 0 (
              echo "❌ Visual Studio编译器设置失败"
              exit /b 1
          )
          
          echo "✅ Visual Studio环境设置成功"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $pythonVersion = "${{ github.event.inputs.python_version || '3.10' }}"
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $cudaVersion = "${{ needs.validate-compatibility.outputs.cuda_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          Write-Host "安装PyTorch $torchVersion (CUDA $cudaVersion)..."
          
          # 设置对应的torchvision和torchaudio版本
          $torchvisionVersion = ""
          $torchaudioVersion = ""
          
          switch ($torchVersion) {
              "2.5" {
                  $torchvisionVersion = "0.20"
                  $torchaudioVersion = "2.5"
              }
              "2.6" {
                  $torchvisionVersion = "0.21" 
                  $torchaudioVersion = "2.6"
              }
              "2.7" {
                  $torchvisionVersion = "0.22"
                  $torchaudioVersion = "2.7"
              }
          }
          
          # 构建安装命令
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          $installCmd = "pip install --no-cache-dir torch==$torchVersion torchvision==$torchvisionVersion torchaudio==$torchaudioVersion --index-url $indexUrl"
          
          Write-Host "执行: $installCmd"
          
          # 执行安装
          $process = Start-Process -FilePath "pip" -ArgumentList @(
              "install", "--no-cache-dir", 
              "torch==$torchVersion", 
              "torchvision==$torchvisionVersion", 
              "torchaudio==$torchaudioVersion", 
              "--index-url", $indexUrl
          ) -Wait -PassThru -NoNewWindow
          
          if ($process.ExitCode -ne 0) {
              Write-Error "PyTorch安装失败"
              exit 1
          }
          
          Write-Host "✅ PyTorch安装完成"

      - name: Verify PyTorch CUDA support
        run: |
          python -c "import torch; print(f'PyTorch版本: {torch.__version__}')"
          python -c "import torch; print(f'CUDA可用: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA版本: {torch.version.cuda}') if torch.cuda.is_available() else print('CUDA不可用')"

      - name: Set build environment variables
        shell: cmd
        run: |
          echo "设置构建环境变量..."
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=2
          set CL=/MP
          
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=2>> %GITHUB_ENV%
          echo CL=/MP>> %GITHUB_ENV%

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          echo "✅ 构建目录已清理"

      - name: Build wheel
        shell: cmd
        run: |
          echo "开始构建wheel..."
          
          REM 重新设置Visual Studio环境
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM 验证环境
          echo "验证构建环境..."
          echo "Python: %PYTHON%"
          echo "CUDA_PATH: %CUDA_PATH%"
          echo "PATH: %PATH%"
          
          where cl
          where nvcc
          
          REM 构建
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo "❌ 构建失败"
              exit /b 1
          )
          
          echo "✅ 构建完成"

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "构建的wheel文件:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  Write-Host "  - $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)"
              }
          } else {
              Write-Host "❌ 没有找到构建的wheel文件"
              exit 1
          }

      - name: Test wheel installation
        shell: powershell
        run: |
          Write-Host "测试wheel安装..."
          
          # 创建新的虚拟环境进行测试
          python -m venv test_env
          & "test_env\Scripts\Activate.ps1"
          
          # 安装构建的wheel
          $wheelFile = Get-ChildItem dist/*.whl | Select-Object -First 1
          pip install $wheelFile.FullName
          
          # 简单测试
          python -c "import nunchaku; print('✅ nunchaku导入成功')"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Build summary
        shell: powershell
        run: |
          Write-Host "🎉 构建成功完成!"
          Write-Host "📋 构建信息:"
          Write-Host "  - Python版本: ${{ github.event.inputs.python_version }}"
          Write-Host "  - PyTorch版本: ${{ github.event.inputs.torch_version }}"
          Write-Host "  - CUDA版本: ${{ needs.validate-compatibility.outputs.cuda_version }}"
          Write-Host "  - 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          if (Test-Path "dist") {
              $wheels = Get-ChildItem dist/*.whl
              Write-Host "  - 构建文件数: $($wheels.Count)"
              Write-Host "  - 总大小: $([math]::Round(($wheels | Measure-Object Length -Sum).Sum/1MB, 2)) MB"
          }
