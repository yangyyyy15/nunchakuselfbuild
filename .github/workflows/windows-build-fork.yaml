name: Windows Build - Fixed CUDA Version Issues

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # Validate version compatibility
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix
          COMPATIBLE=false
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1"|"12.4") COMPATIBLE=true ;;
              esac
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4"|"12.6") COMPATIBLE=true ;;
              esac
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") COMPATIBLE=true ;;
              esac
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
            echo "Recommended combinations:"
            echo "  - PyTorch 2.5: CUDA 12.1, 12.4"
            echo "  - PyTorch 2.6: CUDA 12.4, 12.6"
            echo "  - PyTorch 2.7: CUDA 12.8"
            exit 1
          fi
          
          echo "Version compatible: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
          
          # Output results
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate PyTorch index URL CUDA version
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT

  # Main build job
  build-windows-wheel:
    runs-on: windows-2022
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      - name: Download and Install CUDA
        shell: powershell
        run: |
          $cudaVersion = "${{ needs.validate-compatibility.outputs.cuda_version }}"
          
          Write-Host "Starting CUDA $cudaVersion installation..."
          
          # Method 1: Try direct download and install
          try {
              # Define download URLs for each CUDA version
              $cudaUrls = @{
                  "12.1" = "https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda_12.1.0_531.14_windows.exe"
                  "12.4" = "https://developer.download.nvidia.com/compute/cuda/12.4.1/local_installers/cuda_12.4.1_551.78_windows.exe"
                  "12.6" = "https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.94_windows.exe"
                  "12.8" = "https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda_12.8.0_571.96_windows.exe"
              }
              
              # Get download URL
              $downloadUrl = $cudaUrls[$cudaVersion]
              if (-not $downloadUrl) {
                  throw "Download URL not found for CUDA version $cudaVersion"
              }
              
              Write-Host "Downloading CUDA $cudaVersion..."
              Write-Host "Download URL: $downloadUrl"
              
              $installerPath = "cuda_installer.exe"
              
              # Download CUDA installer with retry mechanism
              $maxRetries = 3
              $retryCount = 0
              $downloadSuccess = $false
              
              do {
                  try {
                      Write-Host "Download attempt $($retryCount + 1)/$maxRetries..."
                      Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -TimeoutSec 1800
                      $downloadSuccess = $true
                      break
                  } catch {
                      $retryCount++
                      Write-Host "Download failed (attempt $retryCount/$maxRetries): $($_.Exception.Message)"
                      if ($retryCount -ge $maxRetries) {
                          throw "Failed to download CUDA installer: $($_.Exception.Message)"
                      }
                      Start-Sleep -Seconds 30
                  }
              } while ($retryCount -lt $maxRetries)
              
              # Verify downloaded file
              if (-not (Test-Path $installerPath)) {
                  throw "CUDA installer download failed - file not found"
              }
              
              $fileSize = (Get-Item $installerPath).Length / 1MB
              Write-Host "Download complete, file size: $([math]::Round($fileSize, 2)) MB"
              
              # Silent install CUDA
              Write-Host "Installing CUDA $cudaVersion..."
              
              # Try with basic silent install first
              $process = Start-Process -FilePath $installerPath -ArgumentList "-s" -Wait -PassThru -NoNewWindow
              
              if ($process.ExitCode -ne 0) {
                  Write-Warning "Standard CUDA installation failed (exit code: $($process.ExitCode)), trying toolkit only..."
                  
                  # Try toolkit only installation
                  $process = Start-Process -FilePath $installerPath -ArgumentList @("-s", "--toolkit") -Wait -PassThru -NoNewWindow
                  
                  if ($process.ExitCode -ne 0) {
                      throw "Direct installation method failed with exit code: $($process.ExitCode)"
                  }
              }
              
              Write-Host "CUDA direct installation completed"
              
          } catch {
              Write-Error "All CUDA installation methods failed: $($_.Exception.Message)"
              exit 1
          }
          
          # Find CUDA installation path
          $possiblePaths = @(
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$cudaVersion",
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9",
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8",
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6",
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4",
              "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1"
          )
          
          $cudaPath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $cudaPath = $path
                  Write-Host "Found CUDA installation path: $cudaPath"
                  break
              }
          }
          
          if (-not $cudaPath) {
              # Try auto-discovery
              $cudaRoot = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA"
              if (Test-Path $cudaRoot) {
                  $versions = Get-ChildItem $cudaRoot | Where-Object { $_.PSIsContainer } | Sort-Object Name -Descending
                  if ($versions) {
                      $cudaPath = $versions[0].FullName
                      Write-Host "Auto-discovered CUDA path: $cudaPath"
                  }
              }
          }
          
          if (-not $cudaPath) {
              Write-Error "Unable to find CUDA installation path"
              exit 1
          }
          
          # Set environment variables correctly
          Write-Output "CUDA_PATH=$cudaPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "CUDA_HOME=$cudaPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "$cudaPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "$cudaPath\libnvvp" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "CUDA installation and configuration complete!"

      - name: Verify CUDA installation
        shell: powershell
        run: |
          Write-Host "Verifying CUDA installation..."
          
          # Display environment variables
          Write-Host "Environment variables:"
          Write-Host "  CUDA_PATH: $env:CUDA_PATH"
          Write-Host "  CUDA_HOME: $env:CUDA_HOME"
          
          # Check CUDA path
          if (-not (Test-Path $env:CUDA_PATH)) {
              Write-Error "CUDA path does not exist: $env:CUDA_PATH"
              exit 1
          }
          
          # Check nvcc command
          try {
              $nvccOutput = & nvcc --version 2>&1
              Write-Host "nvcc version info:"
              Write-Host $nvccOutput
          } catch {
              Write-Error "nvcc command failed: $($_.Exception.Message)"
              
              # Try direct path execution
              $nvccPath = Join-Path $env:CUDA_PATH "bin\nvcc.exe"
              if (Test-Path $nvccPath) {
                  Write-Host "Trying direct path nvcc execution..."
                  try {
                      $nvccOutput = & $nvccPath --version 2>&1
                      Write-Host "nvcc version info (direct path):"
                      Write-Host $nvccOutput
                  } catch {
                      Write-Error "Direct path nvcc also failed: $($_.Exception.Message)"
                      exit 1
                  }
              } else {
                  Write-Error "Cannot find nvcc.exe: $nvccPath"
                  exit 1
              }
          }
          
          Write-Host "CUDA installation verification successful"

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Setup Visual Studio Developer Command Prompt
        shell: cmd
        run: |
          echo Setting up Visual Studio development environment...
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          if %ERRORLEVEL% neq 0 (
              echo Trying BuildTools version...
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          echo Verifying compiler...
          cl
          if %ERRORLEVEL% neq 0 (
              echo ERROR: Visual Studio compiler setup failed
              exit /b 1
          )
          
          echo Visual Studio environment setup successful

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $pythonVersion = "${{ github.event.inputs.python_version || '3.10' }}"
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $cudaVersion = "${{ needs.validate-compatibility.outputs.cuda_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          Write-Host "Installing PyTorch $torchVersion (CUDA $cudaVersion)..."
          
          # Set corresponding torchvision and torchaudio versions
          $torchvisionVersion = ""
          $torchaudioVersion = ""
          
          switch ($torchVersion) {
              "2.5" {
                  $torchvisionVersion = "0.20"
                  $torchaudioVersion = "2.5"
              }
              "2.6" {
                  $torchvisionVersion = "0.21"
                  $torchaudioVersion = "2.6"
              }
              "2.7" {
                  $torchvisionVersion = "0.22"
                  $torchaudioVersion = "2.7"
              }
          }
          
          # Build install command
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          $installCmd = "pip install --no-cache-dir torch==$torchVersion torchvision==$torchvisionVersion torchaudio==$torchaudioVersion --index-url $indexUrl"
          
          Write-Host "Executing: $installCmd"
          
          # Execute installation
          $process = Start-Process -FilePath "pip" -ArgumentList @(
              "install", "--no-cache-dir",
              "torch==$torchVersion",
              "torchvision==$torchvisionVersion",
              "torchaudio==$torchaudioVersion",
              "--index-url", $indexUrl
          ) -Wait -PassThru -NoNewWindow
          
          if ($process.ExitCode -ne 0) {
              Write-Error "PyTorch installation failed"
              exit 1
          }
          
          Write-Host "PyTorch installation complete"

      - name: Verify PyTorch CUDA support
        run: |
          python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA version: {torch.version.cuda}') if torch.cuda.is_available() else print('CUDA not available')"

      - name: Set build environment variables
        shell: cmd
        run: |
          echo Setting build environment variables...
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=2
          set CL=/MP
          
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=2>> %GITHUB_ENV%
          echo CL=/MP>> %GITHUB_ENV%

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          echo Build directories cleaned

      - name: Build wheel
        shell: cmd
        run: |
          echo Starting wheel build...
          
          REM Re-setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM Verify environment
          echo Verifying build environment...
          echo Python: %PYTHON%
          echo CUDA_PATH: %CUDA_PATH%
          echo PATH: %PATH%
          
          where cl
          where nvcc
          
          REM Build
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo Build failed
              exit /b 1
          )
          
          echo Build complete

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "Built wheel files:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  Write-Host "  - $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)"
              }
          } else {
              Write-Host "ERROR: No wheel files found"
              exit 1
          }

      - name: Test wheel installation
        shell: powershell
        run: |
          Write-Host "Testing wheel installation..."
          
          # Create new virtual environment for testing
          python -m venv test_env
          & "test_env\Scripts\Activate.ps1"
          
          # Install built wheel
          $wheelFile = Get-ChildItem dist/*.whl | Select-Object -First 1
          pip install $wheelFile.FullName
          
          # Simple test
          python -c "import nunchaku; print('nunchaku import successful')"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Build summary
        shell: powershell
        run: |
          Write-Host "Build successfully completed!"
          Write-Host "Build info:"
          Write-Host "  - Python version: ${{ github.event.inputs.python_version }}"
          Write-Host "  - PyTorch version: ${{ github.event.inputs.torch_version }}"
          Write-Host "  - CUDA version: ${{ needs.validate-compatibility.outputs.cuda_version }}"
          Write-Host "  - Build time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          
          if (Test-Path "dist") {
              $wheels = Get-ChildItem dist/*.whl
              Write-Host "  - Build files: $($wheels.Count)"
              Write-Host "  - Total size: $([math]::Round(($wheels | Measure-Object Length -Sum).Sum/1MB, 2)) MB"
          }
