name: Windows Build - Optimized CUDA Installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      torch_version:
        description: 'PyTorch version'
        required: true
        default: '2.7'
        type: choice
        options:
          - '2.5'
          - '2.6'
          - '2.7'
      cuda_version:
        description: 'CUDA version'
        required: true
        default: '12.8'
        type: choice
        options:
          - '12.1'
          - '12.4'
          - '12.6'
          - '12.8'

permissions:
  contents: write

jobs:
  # Step 1: Validate version compatibility
  validate-compatibility:
    runs-on: ubuntu-latest
    outputs:
      is_compatible: ${{ steps.check.outputs.is_compatible }}
      cuda_version: ${{ steps.check.outputs.cuda_version }}
      cuda_full_version: ${{ steps.check.outputs.cuda_full_version }}
      torch_short_cuda: ${{ steps.check.outputs.torch_short_cuda }}
      torchvision_version: ${{ steps.check.outputs.torchvision_version }}
      torchaudio_version: ${{ steps.check.outputs.torchaudio_version }}
    steps:
      - name: Check PyTorch and CUDA compatibility
        id: check
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.10' }}"
          TORCH_VERSION="${{ github.event.inputs.torch_version || '2.7' }}"
          CUDA_VERSION="${{ github.event.inputs.cuda_version || '12.8' }}"
          
          echo "Checking compatibility for PyTorch $TORCH_VERSION with CUDA $CUDA_VERSION"
          
          # Define compatibility matrix with specific CUDA versions supported by cuda-toolkit action
          COMPATIBLE=false
          CUDA_FULL_VERSION=""
          case "$TORCH_VERSION" in
            "2.5")
              case "$CUDA_VERSION" in
                "12.1") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.1.1"
                  ;;
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
              esac
              TORCHVISION_VERSION="0.20"
              TORCHAUDIO_VERSION="2.5"
              ;;
            "2.6")
              case "$CUDA_VERSION" in
                "12.4") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.4.1"
                  ;;
                "12.6") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.6.2"
                  ;;
              esac
              TORCHVISION_VERSION="0.21"
              TORCHAUDIO_VERSION="2.6"
              ;;
            "2.7")
              case "$CUDA_VERSION" in
                "12.8") 
                  COMPATIBLE=true
                  CUDA_FULL_VERSION="12.8.0"
                  ;;
              esac
              TORCHVISION_VERSION="0.22"
              TORCHAUDIO_VERSION="2.7"
              ;;
          esac
          
          if [ "$COMPATIBLE" = false ]; then
            echo "ERROR: Incompatible version combination: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
            echo "Recommended combinations:"
            echo "  - PyTorch 2.5: CUDA 12.1, 12.4"
            echo "  - PyTorch 2.6: CUDA 12.4, 12.6"
            echo "  - PyTorch 2.7: CUDA 12.8"
            exit 1
          fi
          
          echo "[SUCCESS] Version compatible: PyTorch $TORCH_VERSION + CUDA $CUDA_VERSION"
          
          # Output results
          echo "is_compatible=true" >> $GITHUB_OUTPUT
          echo "cuda_version=$CUDA_VERSION" >> $GITHUB_OUTPUT
          echo "cuda_full_version=$CUDA_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "torchvision_version=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
          echo "torchaudio_version=$TORCHAUDIO_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate PyTorch index URL CUDA version
          CUDA_SHORT_VERSION=${CUDA_VERSION//.}
          echo "torch_short_cuda=cu$CUDA_SHORT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Summary:"
          echo "  - CUDA full version: $CUDA_FULL_VERSION"
          echo "  - PyTorch CUDA index: cu$CUDA_SHORT_VERSION"
          echo "  - Torchvision: $TORCHVISION_VERSION"
          echo "  - Torchaudio: $TORCHAUDIO_VERSION"

  # Step 2: Main build job with optimized CUDA installation
  build-windows-wheel:
    runs-on: windows-2022
    needs: validate-compatibility
    if: needs.validate-compatibility.outputs.is_compatible == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.10' }}

      # OPTIMIZED: Use Jimver/cuda-toolkit action for much faster installation
      # Note: On Windows, we use 'local' method for better compatibility
      - name: Install CUDA using cuda-toolkit action
        uses: Jimver/cuda-toolkit@v0.2.23
        id: cuda-toolkit
        with:
          cuda: ${{ needs.validate-compatibility.outputs.cuda_full_version }}
          method: 'local'  # Use local method on Windows for better compatibility
          use-github-cache: true  # Enable caching for even faster subsequent runs
          use-local-cache: true
          log-file-suffix: 'cuda-${{ needs.validate-compatibility.outputs.cuda_version }}-py${{ github.event.inputs.python_version }}.txt'

      - name: Verify CUDA installation
        shell: powershell
        run: |
          Write-Host "Verifying CUDA installation..."
          
          # Check environment variables
          Write-Host "`nEnvironment variables:"
          Write-Host "  CUDA_PATH: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          Write-Host "  CUDA_PATH (env): $env:CUDA_PATH"
          
          # Verify nvcc
          Write-Host "`nChecking nvcc:"
          nvcc --version
          if ($LASTEXITCODE -ne 0) {
              Write-Error "nvcc verification failed"
              exit 1
          }
          
          # Check CUDA include files
          $cudaPath = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          Write-Host "`nChecking CUDA include files:"
          
          $requiredHeaders = @("cublas_v2.h", "cuda.h", "cuda_runtime.h", "cudnn.h", "cufft.h", "cusparse.h")
          $includePath = Join-Path $cudaPath "include"
          
          foreach ($header in $requiredHeaders) {
              $fullPath = Join-Path $includePath $header
              if (Test-Path $fullPath) {
                  Write-Host "  [OK] Found: $header"
              } else {
                  if ($header -eq "cudnn.h") {
                      Write-Warning "  [WARNING] Missing: $header (will be installed by PyTorch)"
                  } else {
                      Write-Error "  [ERROR] Missing required header: $header"
                      exit 1
                  }
              }
          }
          
          # Check CUDA libraries
          Write-Host "`nChecking CUDA libraries:"
          
          $requiredLibs = @("cublas64_12.dll", "cusparse64_12.dll", "cufft64_11.dll", "cudart64_12.dll")
          $libPath = Join-Path $cudaPath "bin"
          
          foreach ($lib in $requiredLibs) {
              $fullPath = Join-Path $libPath $lib
              # Try with version suffix first, then without
              if (-not (Test-Path $fullPath)) {
                  $libNoVersion = $lib -replace '64_\d+', '64'
                  $fullPath = Join-Path $libPath $libNoVersion
              }
              
              if (Test-Path $fullPath) {
                  Write-Host "  [OK] Found: $lib"
              } else {
                  Write-Warning "  [WARNING] Missing: $lib (may have different version)"
              }
          }
          
          # List actual files in CUDA directories for debugging
          Write-Host "`nActual files in CUDA include directory:"
          Get-ChildItem (Join-Path $cudaPath "include") -Name | Select-Object -First 10 | ForEach-Object { Write-Host "  $_" }
          
          Write-Host "`nActual DLL files in CUDA bin directory:"
          Get-ChildItem (Join-Path $cudaPath "bin") -Filter "*.dll" -Name | Select-Object -First 10 | ForEach-Object { Write-Host "  $_" }
          
          Write-Host "`n[SUCCESS] CUDA installation verified!"

      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,18.0)'

      - name: Setup Visual Studio Developer Command Prompt
        shell: cmd
        run: |
          echo Setting up Visual Studio development environment...
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          if %ERRORLEVEL% neq 0 (
              echo Enterprise edition not found, trying BuildTools...
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          echo Verifying compiler...
          cl
          if %ERRORLEVEL% neq 0 (
              echo ERROR: Visual Studio compiler setup failed
              exit /b 1
          )
          
          echo [SUCCESS] Visual Studio environment setup successful

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja setuptools wheel build packaging

      - name: Install PyTorch with correct CUDA version
        shell: powershell
        run: |
          $pythonVersion = "${{ github.event.inputs.python_version || '3.10' }}"
          $torchVersion = "${{ github.event.inputs.torch_version || '2.7' }}"
          $torchvisionVersion = "${{ needs.validate-compatibility.outputs.torchvision_version }}"
          $torchaudioVersion = "${{ needs.validate-compatibility.outputs.torchaudio_version }}"
          $torchCudaVersion = "${{ needs.validate-compatibility.outputs.torch_short_cuda }}"
          
          Write-Host "Installing PyTorch $torchVersion with CUDA support..."
          Write-Host "  - PyTorch: $torchVersion"
          Write-Host "  - Torchvision: $torchvisionVersion"
          Write-Host "  - Torchaudio: $torchaudioVersion"
          Write-Host "  - CUDA index: $torchCudaVersion"
          
          # Install PyTorch with specific versions
          $indexUrl = "https://download.pytorch.org/whl/$torchCudaVersion"
          pip install --no-cache-dir "torch==$torchVersion" "torchvision==$torchvisionVersion" "torchaudio==$torchaudioVersion" --index-url $indexUrl
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "PyTorch installation failed"
              exit 1
          }
          
          Write-Host "[SUCCESS] PyTorch installation complete"

      - name: Verify PyTorch CUDA support
        run: |
          python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA version: {torch.version.cuda}') if torch.cuda.is_available() else print('CUDA not available')"
          python -c "import torch; print(f'cuDNN version: {torch.backends.cudnn.version()}') if torch.cuda.is_available() else print('cuDNN not available')"

      - name: Set build environment variables
        shell: cmd
        run: |
          echo Setting build environment variables...
          
          REM Project-specific environment variables
          set NUNCHAKU_INSTALL_MODE=ALL
          set NUNCHAKU_BUILD_WHEELS=1
          set DISTUTILS_USE_SDK=1
          set MAX_JOBS=2
          set CL=/MP
          
          REM CUDA-specific environment variables
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          
          REM Add CUDA directories to paths
          set INCLUDE=%CUDA_PATH%\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Save all environment variables to GitHub env
          echo NUNCHAKU_INSTALL_MODE=ALL>> %GITHUB_ENV%
          echo NUNCHAKU_BUILD_WHEELS=1>> %GITHUB_ENV%
          echo DISTUTILS_USE_SDK=1>> %GITHUB_ENV%
          echo MAX_JOBS=2>> %GITHUB_ENV%
          echo CL=/MP>> %GITHUB_ENV%
          echo CUDA_HOME=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%>> %GITHUB_ENV%
          echo CUDACXX=%CUDA_PATH%\bin\nvcc.exe>> %GITHUB_ENV%
          echo INCLUDE=%CUDA_PATH%\include;%INCLUDE%>> %GITHUB_ENV%
          echo LIB=%CUDA_PATH%\lib\x64;%LIB%>> %GITHUB_ENV%
          
          echo Environment variables set successfully

      - name: Clean build directory
        shell: cmd
        run: |
          if exist build rd /s /q build
          if exist dist rd /s /q dist
          if exist *.egg-info rd /s /q *.egg-info
          echo Build directories cleaned

      - name: Check project structure
        shell: powershell
        run: |
          Write-Host "Checking project structure..."
          
          # Check if src/interop directory exists
          if (Test-Path "src/interop") {
              Write-Host "[OK] Found src/interop directory"
              Get-ChildItem "src/interop" -Name | ForEach-Object { Write-Host "  - $_" }
          } else {
              Write-Warning "[WARNING] src/interop directory not found"
          }
          
          # Check if the project has all required source files
          $requiredDirs = @("src", "nunchaku", "third_party")
          foreach ($dir in $requiredDirs) {
              if (Test-Path $dir) {
                  Write-Host "[OK] Found $dir directory"
              } else {
                  Write-Warning "[WARNING] $dir directory not found"
              }
          }
          
          # List key files in src directory
          if (Test-Path "src") {
              Write-Host "`nFiles in src directory:"
              Get-ChildItem "src" -Filter "*.h" -Name | Select-Object -First 10 | ForEach-Object { Write-Host "  - $_" }
          }

      - name: Build wheel
        shell: cmd
        run: |
          echo Starting wheel build...
          
          REM Re-setup Visual Studio environment for this shell
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 || (
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64
          )
          
          REM Set CUDA environment variables explicitly
          set CUDA_HOME=%CUDA_PATH%
          set CUDA_TOOLKIT_ROOT_DIR=%CUDA_PATH%
          set CUDACXX=%CUDA_PATH%\bin\nvcc.exe
          set PATH=%CUDA_PATH%\bin;%PATH%
          set INCLUDE=%CUDA_PATH%\include;%INCLUDE%
          set LIB=%CUDA_PATH%\lib\x64;%LIB%
          
          REM Verify environment
          echo Environment check:
          where cl
          where nvcc
          echo CUDA_PATH: %CUDA_PATH%
          echo CUDA_HOME: %CUDA_HOME%
          echo INCLUDE contains: %INCLUDE%
          
          REM Check if cublas_v2.h exists
          if exist "%CUDA_PATH%\include\cublas_v2.h" (
              echo [OK] Found cublas_v2.h
          ) else (
              echo [ERROR] cublas_v2.h not found in %CUDA_PATH%\include
              dir "%CUDA_PATH%\include\cublas*" 2>nul
              exit /b 1
          )
          
          REM Build
          python -m build --wheel --no-isolation
          
          if %ERRORLEVEL% neq 0 (
              echo [ERROR] Build failed with error code %ERRORLEVEL%
              exit /b 1
          )
          
          echo [SUCCESS] Build completed successfully

      - name: List built wheels
        shell: powershell
        run: |
          if (Test-Path "dist") {
              Write-Host "Built wheel files:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  $size = [math]::Round($_.Length/1MB, 2)
                  Write-Host "  - $($_.Name) ($size MB)"
              }
              
              # Calculate total size
              $totalSize = (Get-ChildItem dist/*.whl | Measure-Object Length -Sum).Sum / 1MB
              Write-Host "`nTotal size: $([math]::Round($totalSize, 2)) MB"
          } else {
              Write-Error "No wheel files found in dist directory"
              exit 1
          }

      - name: Test wheel installation
        shell: powershell
        run: |
          Write-Host "Testing wheel installation..."
          
          # Create test virtual environment
          python -m venv test_env
          & "test_env\Scripts\Activate.ps1"
          
          # Upgrade pip in test environment
          python -m pip install --upgrade pip
          
          # Install the built wheel
          $wheelFile = Get-ChildItem dist/*.whl | Select-Object -First 1
          Write-Host "Installing wheel: $($wheelFile.Name)"
          pip install $wheelFile.FullName
          
          # Test import
          python -c "import nunchaku; print('[SUCCESS] nunchaku import successful')"
          
          # Deactivate virtual environment
          deactivate
          
          Write-Host "[SUCCESS] Wheel installation test passed"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ github.event.inputs.python_version }}-torch${{ github.event.inputs.torch_version }}-cuda${{ needs.validate-compatibility.outputs.cuda_version }}
          path: dist/*.whl
          retention-days: 30

      - name: Upload CUDA installation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cuda-installation-logs
          path: '*.log.txt'
          retention-days: 7

      - name: Build summary
        shell: powershell
        run: |
          Write-Host "`nBuild Summary"
          Write-Host "============="
          Write-Host "[SUCCESS] Build completed successfully!"
          Write-Host ""
          Write-Host "Configuration:"
          Write-Host "  - Python: ${{ github.event.inputs.python_version }}"
          Write-Host "  - PyTorch: ${{ github.event.inputs.torch_version }}"
          Write-Host "  - CUDA: ${{ needs.validate-compatibility.outputs.cuda_version }} (full: ${{ needs.validate-compatibility.outputs.cuda_full_version }})"
          Write-Host "  - Build time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "  - Runner: $env:RUNNER_NAME"
          
          if (Test-Path "dist") {
              Write-Host "`nBuilt artifacts:"
              Get-ChildItem dist/*.whl | ForEach-Object {
                  Write-Host "  - $($_.Name)"
              }
          }

  # Optional: Create release if tagged
  create-release:
    needs: build-windows-wheel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: windows-wheels-*
          merge-multiple: true
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl
          fail_on_unmatched_files: true
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            
            ### Build Configuration
            - Python: ${{ github.event.inputs.python_version }}
            - PyTorch: ${{ github.event.inputs.torch_version }}
            - CUDA: ${{ needs.validate-compatibility.outputs.cuda_version }}
            
            ### Installation
            ```bash
            pip install <wheel_file_name>.whl
            ```
